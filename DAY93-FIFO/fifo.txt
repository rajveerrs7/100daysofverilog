`timescale 1ns / 1ps

module FIFO #(
    parameter WIDTH = 8, 
    parameter DEPTH = 16
)(
    input  wire clk, rst,
    input  wire rd_en, wr_en,
    input  wire [WIDTH-1:0] data_in,
    output reg  [WIDTH-1:0] data_out,
    output wire empty, full
);

    localparam ADDR_WIDTH = $clog2(DEPTH);

    reg [WIDTH-1:0] MEM [0:DEPTH-1];
    reg [ADDR_WIDTH:0] rd_ptr, wr_ptr; // one extra bit for wrap-around

    // Write
    always @(posedge clk) begin
        if (!rst && wr_en && !full) begin
            MEM[wr_ptr[ADDR_WIDTH-1:0]] <= data_in;
            wr_ptr <= wr_ptr + 1;
        end
    end

    // Read
    always @(posedge clk) begin
        if (!rst && rd_en && !empty) begin
            data_out <= MEM[rd_ptr[ADDR_WIDTH-1:0]];
            rd_ptr <= rd_ptr + 1;
        end
    end

    // Reset
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            rd_ptr <= 0;
            wr_ptr <= 0;
            data_out <= 0;
        end
    end

    // Status signals
    assign empty = (rd_ptr == wr_ptr);
    assign full  = ((wr_ptr[ADDR_WIDTH-1:0] == rd_ptr[ADDR_WIDTH-1:0]) &&
                   (wr_ptr[ADDR_WIDTH] != rd_ptr[ADDR_WIDTH]));

endmodule
